com.ibm.java.diagnostics.healthcenter.agent.port=1972
com.ibm.java.diagnostics.healthcenter.agent.bufferSize=15000000
com.ibm.java.diagnostics.healthcenter.agent.transport=iiop
#com.ibm.java.diagnostics.healthcenter.agent.iiop.port=
com.ibm.java.diagnostics.healthcenter.clear.jmx.initial.builder=true
com.ibm.java.diagnostics.healthcenter.data.collection.level=full
com.ibm.java.diagnostics.healthcenter.stack.trace.depth=5
com.ibm.java.diagnostics.healthcenter.allocation.threshold.low=
com.ibm.java.diagnostics.healthcenter.allocation.threshold.high=
# On Windows, directory names must use '\\' for directory separators and not a single '\'.  
# eg. c:\\temp and NOT c:\temp 
com.ibm.java.diagnostics.healthcenter.headless.output.directory=
com.ibm.java.diagnostics.healthcenter.output.directory=
## ############# Security #############
## For SSL encryption of the connection to the client set the following 2 properties
## See the help for instructions on creation of keys and keystore
##
#com.ibm.java.diagnostics.healthcenter.agent.ssl.keyStore=keystore
#com.ibm.java.diagnostics.healthcenter.agent.ssl.keyStorePassword=password
## Headless mode configuration options
com.ibm.java.diagnostics.healthcenter.headless.delay.start=0
com.ibm.java.diagnostics.healthcenter.headless.run.duration=0
com.ibm.java.diagnostics.healthcenter.headless.run.pause.duration=0
com.ibm.java.diagnostics.healthcenter.headless.run.number.of.runs=0
#com.ibm.java.diagnostics.healthcenter.headless.files.to.keep specifies how many headless files
#to keep.  To manage disk space, set this value accordingly or set to 0 to keep everything
com.ibm.java.diagnostics.healthcenter.headless.files.to.keep=5
#Set this value to limit the max size of the files (in bytes) inside each created HCD. 
#Default value of not set is maximum value of 2gigabyte.  Settings above this are ignored
com.ibm.java.diagnostics.healthcenter.headless.files.max.size=
#Setting the headless.filename property will pre append the healthcenter.hcd file created
#in a headless run with this setting
com.ibm.java.diagnostics.healthcenter.headless.filename=
# thread.collection.interval specifies how long to wait inbetween collecting thread data
# Setting a value less than 30 (seconds) will increase the overhead on the application being
# monitored
com.ibm.java.diagnostics.healthcenter.thread.collection.interval=30
# depth of thread stack to collect, blank represents full stacks and 0 would give no stack
com.ibm.java.diagnostics.healthcenter.thread.stack.depth=
com.ibm.java.diagnostics.healthcenter.data.collection.event=
# javacore creation options can be set to control how often javacores
# are triggered and how long to wait before starting the first javacore.
# javacore.interval specify in seconds
com.ibm.java.diagnostics.healthcenter.javacore.interval=20
com.ibm.java.diagnostics.healthcenter.javacore.creation.count=0
# delay.start specify in minutes, default of 10 minutes
com.ibm.java.diagnostics.healthcenter.javacore.delay.start=10

# This setting prevents any calls from the client that could potentially
# have an impact on the monitored application from taking effect. For example
# generating a dump or requesting class histogram data.  Set to "on" to enable
com.ibm.diagnostics.healthcenter.readonly=off

# Connector properties

# Enable JMX connector. Default is on
#com.ibm.diagnostics.healthcenter.jmx=

# Enable headless connector.
com.ibm.diagnostics.healthcenter.headless=off

# Enable MQTT connector.
com.ibm.diagnostics.healthcenter.mqtt=off

# MQTT connection properties
com.ibm.diagnostics.healthcenter.mqtt.broker.host=localhost
com.ibm.diagnostics.healthcenter.mqtt.broker.port=1883
#com.ibm.diagnostics.healthcenter.mqtt.broker.user=
#com.ibm.diagnostics.healthcenter.mqtt.broker.pass=
#com.ibm.diagnostics.healthcenter.mqtt.topic.namespace=myApplication/namespace
#com.ibm.diagnostics.healthcenter.mqtt.application.id=myApplication

# Agent logging level: none | warning | info | fine | finest | debug
com.ibm.diagnostics.healthcenter.logging.level=info